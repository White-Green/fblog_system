name: Deploy Cloudflare Workers

inputs:
  working_dir:
    required: true
    type: string
  article_data_path:
    required: true
    type: string
  user_data_path:
    required: true
    type: string
  build_data_path:
    required: true
    type: string
  project_name:
    required: true
    type: string
  site_url:
    required: true
    type: string
  public_key_path:
    required: true
    type: string
  cloudflare_account_id:
    required: true
    type: string
  cloudflare_api_token:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - id: normalized
      name: Normalize variables
      shell: bash
      run: |
        WORKING_DIR="${{ inputs.working_dir }}"
        echo "working_dir=${WORKING_DIR%/}" >> $GITHUB_OUTPUT
        node -p 'const i="${{ inputs.site_url }}";`host_name=${new URL(i.match(/^https?:\/\//)? i : "https://"+i).hostname}`' >> $GITHUB_OUTPUT

    - name: Prepare workspace
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: |
        mkdir -p contents/articles contents/users public
        cp -r ${{ inputs.article_data_path }}/* contents/articles/
        cp -r ${{ inputs.user_data_path }}/* contents/users/
        cp -r ${{ inputs.build_data_path }}/* public/

    - name: Normalize HTML structure
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: |
        shopt -s extglob
        for dir in articles users; do
          mkdir -p public/raw__/${dir}/html public/${dir}
          mv public/${dir}/!(index.html) public/raw__/${dir}/html || true
          mv public/${dir}/index.html public/${dir}/index.html || true
          cd public/raw__/${dir}/html
          find . -type f -name index.html -print0 | while IFS= read -r -d '' file; do mv "$file" "${file%/*}.html"; done
          cd - >/dev/null
        done

    - name: Enable corepack
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: corepack enable

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'

    - name: Install Node dependencies
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: pnpm install

    - name: Build site
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: PUBLIC_KEY_FILE=${{ inputs.public_key_path }} SITE_URL="https://${{ steps.normalized.outputs.host_name }}" pnpm run build

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - id: crate_version
      name: Determine worker-build version
      shell: bash
      run: |
        VER=$(curl https://index.crates.io/wo/rk/worker-build | jq -r 'select(.yanked == false) | .vers' | sort -V | tail -n 1)
        echo "worker_build=$VER" >> $GITHUB_OUTPUT

    - id: worker_build_binary_cache
      name: Restore worker-build cache
      uses: actions/cache@v4
      with:
        key: fblog_system-cargo_install-${{ steps.crate_version.outputs.worker_build }}
        path: ~/.cargo/bin/worker-build

    - name: Install worker-build
      shell: bash
      if: steps.worker_build_binary_cache.outputs.cache-hit != 'true'
      run: cargo install worker-build

    - name: Compute build-cache key
      id: build_key
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      shell: bash
      run: |
        echo "cargo_lock_hash=$(sha256sum "Cargo.lock" | cut -d' ' -f1)" >> $GITHUB_OUTPUT

    - name: Restore build cache
      uses: actions/cache@v4
      with:
        key: fblog_system-build_cache-${{ steps.build_key.outputs.cargo_lock_hash }}
        path: /tmp/fblog_system_build_cache

    - name: Load build cache
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: mv /tmp/fblog_system_build_cache ./target || true

    - name: Upload article snapshot
      uses: cloudflare/wrangler-action@v3
      with:
        workingDirectory: ${{ steps.normalized.outputs.working_dir }}
        accountId: ${{ inputs.cloudflare_account_id }}
        apiToken: ${{ inputs.cloudflare_api_token }}
        preCommands: ./crates/cloudflare_workers/update_snapshot.sh ${{ inputs.project_name }}
        command: r2 object put --remote "${{ inputs.project_name }}-blog-bucket/article_snapshot.zst" -f ./article_snapshot_new.zst

    - name: Move built site
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: mv dist crates/cloudflare_workers/public

    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        workingDirectory: ${{ steps.normalized.outputs.working_dir }}/crates/cloudflare_workers
        accountId: ${{ inputs.cloudflare_account_id }}
        apiToken: ${{ inputs.cloudflare_api_token }}
        preCommands: |
          ./setup_resources.sh "${{ inputs.project_name }}" "${{ steps.normalized.outputs.host_name }}"
        command: deploy
        postCommands: |
          CF_ACCOUNT_ID=${{ inputs.cloudflare_account_id }} CF_API_TOKEN=${{ inputs.cloudflare_api_token }} ./send_to_queue.sh ${{ inputs.project_name }}-job-queue ${{ steps.normalized.outputs.working_dir }}/events.jsonl

    - name: Save build cache
      shell: bash
      working-directory: ${{ steps.normalized.outputs.working_dir }}
      run: mv ./target /tmp/fblog_system_build_cache
